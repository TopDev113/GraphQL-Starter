version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.9.0
  aws-cli: circleci/aws-cli@1.1.0
  # Uncomment the slack notify slack steps on each job if you plan to use Slack Webhooks
  # slack: circleci/slack@3.4.2

commands:
  restore_cache_command:
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

  save_cache_command:
    steps:
      - save_cache:
          paths:
            - node_modules
            - ~/.cache
          key: v1-dependencies-{{ checksum "package-lock.json" }}

  persist_workspace_command:
    steps:
      # https://circleci.com/docs/2.0/configuration-reference/#persist_to_workspace
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory of the executor.
          # This is a directory on the container which is  taken to be the root directory of the workspace.
          root: ./
          paths:
            - ./

  attach_workspace_command:
    steps:
      # https://circleci.com/docs/2.0/configuration-reference/#attach_workspace
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: .

  update_elastic_beanstalk_command:
    parameters:
      application-name:
        type: string
      environment-id:
        type: string
      version-label:
        type: string
    steps:
      - aws-cli/setup
      - run:
          name: 'Update Elastic Beanstalk'
          command: |
            aws elasticbeanstalk update-environment --application-name << parameters.application-name >> --environment-id << parameters.environment-id >> --version-label << parameters.version-label >>

  notify_slack_command:
    parameters:
      fail-only:
        type: boolean
        default: false
    steps:
      - slack/status:
          fail_only: << parameters.fail-only >>
          success_message: ':tada: *$CIRCLE_JOB* job has *succeeded* for branch: *$CIRCLE_BRANCH*'
          failure_message: ':red_circle: *$CIRCLE_JOB* job has *failed* for branch: *$CIRCLE_BRANCH*'

  lint_commit_message:
    steps:
      - run:
          name: Define environment variable with latest commit message
          command: |
            echo 'export COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Lint commit message
          command: echo "$COMMIT_MESSAGE" | npx commitlint

executors:
  docker_node_executor:
    docker:
      - image: circleci/node:12
    working_directory: ~/repo
  machine_ubuntu_executor:
    machine:
      image: 'ubuntu-1604:201903-01'
    working_directory: ~/repo

jobs:
  prepare:
    executor: docker_node_executor
    steps:
      - checkout # ultimately just means, clone this repository
      - restore_cache_command
      - run:
          name: Install npm dependencies
          command: |
            npm install
      - save_cache_command
      - persist_workspace_command
      # - notify_slack_command:
      #     fail-only: true

  # Fan-out (split each step as a job) if it gets big and can afford :)
  tests:
    executor: docker_node_executor
    steps:
      - attach_workspace_command
      - lint_commit_message
      - run:
          name: Run linter
          command: |
            npm run lint
      - run:
          name: Run tsc with no emit
          command: |
            npm run tsc-check
      - run:
          name: Run tests
          command: |
            npm run test
      # - notify_slack_command

  build_and_push_image_production:
    executor: machine_ubuntu_executor
    steps:
      - aws-ecr/build-and-push-image:
          repo: $AWS_ECR_REPOSITORY_NAME
          tag: 'production,$CIRCLE_SHA1'
          dockerfile: Dockerfile
          path: .
      # - notify_slack_command

  build_and_push_image_staging:
    executor: machine_ubuntu_executor
    steps:
      - aws-ecr/build-and-push-image:
          repo: $AWS_ECR_REPOSITORY_NAME
          tag: 'staging'
          dockerfile: Dockerfile
          path: .
      # - notify_slack_command

  build_and_push_image_test:
    executor: machine_ubuntu_executor
    steps:
      - aws-ecr/build-and-push-image:
          repo: $AWS_ECR_REPOSITORY_NAME
          tag: 'test'
          dockerfile: Dockerfile
          path: .
      # - notify_slack_command

  update_elastic_beanstalk_production:
    executor: aws-cli/default
    steps:
      - update_elastic_beanstalk_command:
          application-name: $AWS_EB_APP_NAME_PRODUCTION
          environment-id: $AWS_EB_ENV_ID_PRODUCTION
          version-label: $AWS_EB_VERSION_LABEL_PRODUCTION
      # - notify_slack_command

  update_elastic_beanstalk_staging:
    executor: aws-cli/default
    steps:
      - update_elastic_beanstalk_command:
          application-name: $AWS_EB_APP_NAME_STAGING
          environment-id: $AWS_EB_ENV_ID_STAGING
          version-label: $AWS_EB_VERSION_LABEL_STAGING
      # - notify_slack_command

  update_elastic_beanstalk_test:
    executor: aws-cli/default
    steps:
      - update_elastic_beanstalk_command:
          application-name: $AWS_EB_APP_NAME_TEST
          environment-id: $AWS_EB_ENV_ID_TEST
          version-label: $AWS_EB_VERSION_LABEL_TEST
      # - notify_slack_command

workflows:
  version: 2
  ci_cd:
    jobs:
      - prepare

      - tests:
          # specifying "requires" waits for the listed jobs to finish before executing this job
          requires:
            - prepare

      ######## PRODUCTION ########
      - build_and_push_image_production:
          requires:
            - tests
          filters:
            branches:
              only:
                - master
      - update_elastic_beanstalk_production:
          requires:
            - build_and_push_image_production
          filters:
            branches:
              only:
                - master

      ######## STAGING ########
      - build_and_push_image_staging:
          requires:
            - tests
          filters:
            branches:
              only:
                - staging
      - update_elastic_beanstalk_staging:
          requires:
            - build_and_push_image_staging
          filters:
            branches:
              only:
                - staging

      ######## TEST ########
      - build_and_push_image_test:
          requires:
            - tests
          filters:
            branches:
              only:
                - test
      - update_elastic_beanstalk_test:
          requires:
            - build_and_push_image_test
          filters:
            branches:
              only:
                - test
